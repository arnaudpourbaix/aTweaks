/*
 *  Stronghold area type "FL_STRONGHOLD"
 *  https://github.com/FredrikLindgren/areatype
 *  Copyright (C) 2015  Fredrik Lindgren, a.k.a., Wisp
 *
 *  This script is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version. The following additional
 *  permissions apply:
 *
 *  Section 4: Conveying Verbatim Copies
 *  You are only required to retain any existing notices of copyright
 *  and absence of warranty.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this script.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

OUTER_SPRINT "fl#areatype#stronghold#version" 1.0.0

DEFINE_PATCH_FUNCTION fl#areatype#stronghold#write_area_type
  INT_VAR
    areatype = FL_STRONGHOLD
BEGIN
  PATCH_IF SOURCE_SIZE > 0x11b BEGIN
    WRITE_SHORT 0x48 THIS BOR (1 << areatype)
  END
END

DEFINE_ACTION_FUNCTION fl#areatype#stronghold#add_area_type
  RET
    FL_STRONGHOLD
    fl#StrongholdKickedOut
BEGIN

  /*
   * This variable can be used in .baf or .d files to prevent triggers from
   * returning true when the player is an a stronghold area they've been kicked
   * out of. The logic is that for the entire trigger to be true, the player
   * either has to be in an area that isn't a stronghold, or they need to have
   * not been kicked out of the stronghold they are in.
   */
  OUTER_SPRINT fl#StrongholdKickedOut
  ~OR(2)
    !AreaCheck("ar0904")
    !Global("Stripped","GLOBAL",1)
  OR(2)
    !AreaCheck("ar0901")
    !Global("Stripped","GLOBAL",2)
  OR(2)
    !AreaCheck("ar0902")
    !Global("Stripped","GLOBAL",3)
  OR(2)
    !AreaCheck("ar0903")
    !Global("PaladinOrder","GLOBAL",3)
  OR(2)
    !AreaCheck("ar0321")
    !Global("PGFailed","GLOBAL",1)
  OR(2)
    !AreaCheck("ar0322")
    !Global("PGFailed","GLOBAL",1)
  OR(2)
    !AreaCheck("ar0323")
    !Global("PGFailed","GLOBAL",1)
  OR(2)
    !AreaCheck("ar0324")
    !Global("PGFailed","GLOBAL",1)
  OR(2)
    !AreaCheck("ar1107")
    !Global("RangerProtector","GLOBAL",6)~

  // Work-around for a bug in BG: EE
  ACTION_IF GAME_IS ~bgee~ AND !FILE_CONTAINS_EVALUATED (areatype.ids "CANRESTOTHER") BEGIN
    APPEND areatype.ids "128 CANRESTOTHER"
  END

  ADD_AREA_TYPE FL_STRONGHOLD

  ACTION_FOR_EACH area IN
  /*thief*/ ar0321 ar0322 ar0323 ar0324
  /*ranger*/ ar1107
  /*warrior*/ ar1305 ar1306 ar1307
  /*pocket plane*/ ar4500
  BEGIN
    ACTION_IF FILE_EXISTS_IN_GAME "%area%.are" BEGIN
      COPY_EXISTING "%area%.are" override
        LPF fl#areatype#stronghold#write_area_type END
      BUT_ONLY
    END
  END

<<<<<<<< .../fl#areatype#stronghold/inlined/script.baf
IF
Global("fl#AddedStrongholdAreaType","MYAREA",0)
%fl#Condition%
THEN
RESPONSE #100
  AddAreaType(FL_STRONGHOLD)
  SetGlobal("fl#AddedStrongholdAreaType","MYAREA",1)
  Continue()
END
>>>>>>>>

  ACTION_DEFINE_ASSOCIATIVE_ARRAY fl#areatype#stronghold#conditions BEGIN
    ar0410 => ~Global("PCSphere","GLOBAL",1)~
    ar0411 => ~Global("PCSphere","GLOBAL",1)~
    ar0412 => ~Global("PCSphere","GLOBAL",1)~
    ar0413 => ~Global("PCSphere","GLOBAL",1)~
    ar0419 => ~Global("PCSphere","GLOBAL",1)~
    ar0420 => ~Global("PCSphere","GLOBAL",1)~
    ar0901 => ~Global("JoinHelm","GLOBAL",1)~
    ar0902 => ~Global("JoinLathander","GLOBAL",1)~
    ar0903 => ~Global("PaladinOrder","GLOBAL",1)~
    ar0904 => ~Global("JoinTalos","GLOBAL",1)~
    ar1901 => ~Global("DruidStronghold","GLOBAL",1)~
  END

  ACTION_FOR_EACH area IN
  /*mage*/ ar0410 ar0411 ar0412 ar0413 ar0419 ar0420
  /*helm*/ ar0901
  /*lathander*/ ar0902
  /*paladin*/ ar0903
  /*talos*/ ar0904
  /*druid*/ ar1901
  BEGIN
    COPY_EXISTING "%area%.are" override
      PATCH_IF SOURCE_SIZE > 0x11b BEGIN
        TO_LOWER area
        SPRINT fl#Condition $fl#areatype#stronghold#conditions("%area%")
        READ_ASCII 0x94 areascript
        PATCH_IF FILE_EXISTS_IN_GAME "%areascript%.bcs" BEGIN
          c = 0
          INNER_ACTION BEGIN
            COPY_EXISTING "%areascript%.bcs" override
              DECOMPILE_AND_PATCH BEGIN
                COUNT_REGEXP_INSTANCES CASE_SENSITIVE EXACT_MATCH ~AddAreaType(FL_STRONGHOLD)~ c
              END
            BUT_ONLY
            IF ~%FL_STRONGHOLD%~
          END
          PATCH_IF c = 0 BEGIN
            INNER_ACTION BEGIN
              EXTEND_TOP "%areascript%.bcs" ".../fl#areatype#stronghold/inlined/script.baf" EVAL
            END
          END
        END ELSE BEGIN
          INNER_ACTION BEGIN
            COPY - ".../fl#areatype#stronghold/inlined/script.baf"
                   ".../fl#areatype#stronghold/inlined/%area%.baf"
            COMPILE ".../fl#areatype#stronghold/inlined/%area%.baf" EVAL
          END
          WRITE_ASCIIE 0x94 "%area%" #8
        END
      END
    BUT_ONLY
  END

END //DEFINE_ACTION_FUNCTION

ACTION_IF GAME_INCLUDES ~soa~ BEGIN
  LAF fl#areatype#stronghold#add_area_type
    RET
      FL_STRONGHOLD
      fl#StrongholdKickedOut
  END
END ELSE BEGIN
  PRINT ~WARNING: FL_STRONGHOLD is only available for BG2, BG2: ToB, BGT and BGII: EE games~
END
